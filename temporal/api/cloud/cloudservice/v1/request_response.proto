syntax = "proto3";

package temporal.api.cloud.cloudservice.v1;

option go_package = "go.temporal.io/api/cloud/cloudservice/v1;cloudservice";

import "temporal/api/cloud/operation/v1/message.proto";
import "temporal/api/cloud/user/v1/message.proto";

message GetUsersRequest {
    // the requested size of the page to retrieve
    int32 page_size = 1;
    // the page token
    string page_token = 2;
    // optional field to filter users by email address
    string email_address = 3;
    // optional field to filter users by the namespace assigned to them
    string namespace = 4;
}

message GetUsersResponse {
    // the list of users
    repeated temporal.api.cloud.user.v1.User users = 1;
    // the next page's token
    string next_page_token = 2;
}

message GetUserRequest {
    // the id of the user to get
    string user_id = 1;
}

message GetUserResponse {
    // the user
    temporal.api.cloud.user.v1.User user = 1;
}

message CreateUserRequest {
    // the spec for the user to invite
    temporal.api.cloud.user.v1.UserSpec spec = 1;
    // the id to use for this async operation - optional
    string async_operation_id = 2;
}

message CreateUserResponse {
    // the id of the user that was invited
    string user_id = 1;
    // the async operation
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 2;
}

message UpdateUserRequest {
    // the id of the user to update
    string user_id = 1;
    // the new user specification
    temporal.api.cloud.user.v1.UserSpec spec = 2;
    // the version of the user for which this update is intended for
    // the latest version can be found in the user status
    string resource_version = 3;
    // the id to use for this async operation - optional
    string async_request_id = 4;
}

message UpdateUserResponse {
    // the async operation
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 1;
}

message DeleteUserRequest {
    // the id of the user to delete
    string user_id = 1;
    // the version of the user for which this delete is intended for
    // the latest version can be found in the user status
    string resource_version = 2;
    // the id to use for this async operation - optional
    string async_request_id = 3;
}

message DeleteUserResponse {
    // the async operation
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 1;
}

message SetUserNamespacePermissionRequest {
    // the namespace to set permissions for
    string namespace = 1;
    // the id of the user to set permissions for
    string user_id = 2;
    // the namespace permission to assign the user, has to be one of [admin, write, read_only]
    string permission = 3;
    // the version of the user for which this update is intended for
    // the latest version can be found in the user status
    string resource_version = 4;
    // the id to use for this async operation - optional
    string async_request_id = 5;
}

message SetUserNamespacePermissionResponse {
    // the request status of the update operation
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 1;
}

message GetAsyncOperationRequest {
    // the async operation id
    string async_operation_id = 1;
}

message GetAsyncOperationResponse {
    // the async operation 
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 1;
}
