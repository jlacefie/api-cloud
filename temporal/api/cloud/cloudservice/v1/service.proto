syntax = "proto3";

package temporal.api.cloud.cloudservice.v1;

option go_package = "go.temporal.io/api/cloud/cloudservice/v1;cloudservice";

import "temporal/api/cloud/cloudservice/v1/request_response.proto";
import "google/api/annotations.proto";

service CloudService {
    // Gets all known users
    rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {
	option (google.api.http) = {
            get: "/api/v1/users",
        };
    }
    
    // Get a user
    rpc GetUser(GetUserRequest) returns (GetUserResponse) {
	option (google.api.http) = {
            get: "/api/v1/users/{user_id}",
        };
    }

    // Invite a user
    rpc InviteUser(InviteUserRequest) returns (InviteUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/users",
	    body: "*"
        };
    }

    // Update a user
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
	option (google.api.http) = {
            post: "/api/v1/users/{user_id}",
	    body: "*"
        };
    }

    // Delete a user
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
	option (google.api.http) = {
            delete: "/api/v1/users/{user_id}",
        };
    }

    // Set a user's permission to a namespace
    rpc SetUserNamespacePermission(SetUserNamespacePermissionRequest) returns (SetUserNamespacePermissionResponse) {
	option (google.api.http) = {
            post: "/api/v1/namespaces/{namespace}/users/{user_id}",
	    body: "*"
        };
    }

    // Get the status of an asynchronous request.
    rpc GetRequestStatus (GetRequestStatusRequest) returns (GetRequestStatusResponse) {
        option (google.api.http) = {
            get: "/api/v1/requests/{request_id}",
        };
    }
}
